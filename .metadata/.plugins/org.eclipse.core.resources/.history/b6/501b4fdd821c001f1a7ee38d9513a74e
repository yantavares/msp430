#include <msp430.h>

#define BUTTON BIT1  // Button is connected to P1.1
#define RED_LED BIT0 // Red LED is connected to P1.0
#define GREEN_LED BIT7 // Green LED is connected to P4.7

void setup();

volatile unsigned int state = 0; // Variable to keep track of the LED state

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // Stop watchdog timer
    setup();                    // Initialize ports and interrupts

    __bis_SR_register(GIE);     // Enter LPM0 w/ interrupt

    while (1) {
        // Main loop does nothing, all work is done in ISR
    }
}

void setup()
{
    // Configure LEDs
    P1DIR |= RED_LED;           // Set P1.0 as output
    P1OUT &= ~RED_LED;          // Initially turn off the red LED
    P4DIR |= GREEN_LED;         // Set P4.7 as output
    P4OUT &= ~GREEN_LED;        // Initially turn off the green LED

    // Configure button
    P1DIR &= ~BUTTON;           // Set P1.1 as input
    P1REN |= BUTTON;            // Enable pull-up/pull-down resistor
    P1OUT |= BUTTON;            // Select pull-up resistor
    P1IE |= BUTTON;             // Enable interrupt for P1.1
    P1IES |= BUTTON;            // Interrupt on falling edge
    P1IFG &= ~BUTTON;           // Clear interrupt flag
}

// Port 1 interrupt service routine
#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void)
{
    if (P1IFG & BUTTON) {       // Check if the button caused the interrupt
        switch (state) {
            case 0:
                P1OUT ^= RED_LED;    // Toggle red LED
                P4OUT &= ~GREEN_LED; // Ensure green LED is off
                state = 1;           // Move to next state
                break;
            case 1:
                P4OUT ^= GREEN_LED;  // Toggle green LED
                P1OUT &= ~RED_LED;   // Ensure red LED is off
                state = 2;           // Move to next state
                break;
            case 2:
                P1OUT &= ~RED_LED;   // Ensure red LED is off
                P4OUT &= ~GREEN_LED; // Ensure green LED is off
                state = 0;           // Move to next state
                break;
        }

        // Clear interrupt flag and exit LPM0
        P1IFG &= ~BUTTON;        // Clear interrupt flag
        __bic_SR_register_on_exit(LPM4_bits); // Exit low power mode 4
    }
}
